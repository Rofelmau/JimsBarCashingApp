name: Build Qt Application for Raspberry Pi 5

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Setup QEMU f端r Multi-Arch-Unterst端tzung
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker-Image mit aktualisiertem cmake bauen
      - name: Build custom Qt image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t custom-qt-image \
            --load \
            - <<EOF
          FROM carlonluca/qt-dev:5.15.2
          RUN apt-get update && apt-get install -y sqlite3 coreutils wget && \
              wget https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3-linux-aarch64.sh && \
              sh cmake-3.25.3-linux-aarch64.sh --skip-license --prefix=/usr/local && \
              rm cmake-3.25.3-linux-aarch64.sh
          EOF

      # 3. Debugging von gemounteten Dateien
      - name: Debug mounted files
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            custom-qt-image \
            ls -la

      # 4. Sicherstellen, dass .build-Verzeichnis existiert
      - name: Ensure build directory exists
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            custom-qt-image \
            mkdir -p build

      # 5. CMake ausf端hren
      - name: Run cmake inside custom Qt container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            custom-qt-image \
            cmake -S /workspace -B /workspace/build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_PREFIX_PATH=/opt/Qt-5.15.2/

      # 6. Make ausf端hren
      - name: Run make inside custom Qt container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace/build \
            custom-qt-image \
            make -j$(nproc)

      # 7. Build-Resultat als Artefakt hochladen
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: QtBuild
          path: build/src/MyProject