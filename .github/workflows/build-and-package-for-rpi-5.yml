name: Build Qt Application for Raspberry Pi 5

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Setup QEMU für Multi-Arch-Unterstützung
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # 2. Docker Buildx konfigurieren
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Build erweitertes Custom-Qt-Image mit `sqlite3`
      - name: Build custom Qt image with SQLite3
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t custom-qt-image \
            --load \
            - <<EOF
          FROM carlonluca/qt-dev:5.15.2
          RUN apt-get update && apt-get install -y sqlite3
          EOF

      # 3. Debug: Überprüfen, ob Dateien korrekt gemountet sind
      - name: Debug mounted files
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            custom-qt-image \
            ls -la

      # 4. Sicherstellen, dass CMakeLists.txt vorhanden ist
      - name: Check for CMakeLists.txt
        run: |
          if [ ! -f $(pwd)/CMakeLists.txt ]; then
            echo "ERROR: CMakeLists.txt not found!"
            exit 1
          fi

      # 5. CMake ausführen
      - name: Run cmake inside custom Qt container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            custom-qt-image \
            cmake -S /workspace -B /workspace/build -DCMAKE_BUILD_TYPE=Release

      # 6. Make ausführen
      - name: Run make inside custom Qt container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace/build \
            custom-qt-image \
            make -j$(nproc)

      # 6. Build-Resultat als Artefakt hochladen
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: QtBuild
          path: build/src/MyProject